
class Solution {
  public:
    // Function to find whether a path exists from the source to destination.
    bool is_Possible(vector<vector<int>>& grid) {
        int n = grid.size();
        int source = 1;
        int destination = 2;
        vector<vector<int>> visited(n, vector<int>(n, 0));
        queue<pair<int, int>> q;
        
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < n; j++) {
                if(!visited[i][j] && grid[i][j] == source) {
                    q.push({i, j});
                    visited[i][j] = 1;
                }
            }
        }
        
        while(!q.empty()) {
            int frontRow = q.front().first;
            int frontCol = q.front().second;
            q.pop();
            
            int delRow[] = {0, 1, 0, -1};
            int delCol[] = {1, 0, -1, 0};
            
            for(int i = 0; i < n; i++) {
                int newRow = frontRow + delRow[i];
                int newCol = frontCol + delCol[i];
                
                if(newRow >= 0 && newRow < n && newCol >= 0 && newCol < n && !visited[newRow][newCol]
                && grid[newRow][newCol] != 0) {
                    if(grid[newRow][newCol] == destination) {
                        return true;
                    }
                    else if(grid[newRow][newCol] == 3) {
                        q.push({newRow, newCol});
                        visited[newRow][newCol] = 1;
                    }
                }
            }
        }
        
        return false;
        
    }
};
