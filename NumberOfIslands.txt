#include<iostream>
#include<vector>
#include<queue>
using namespace std;

void BFS(vector<vector<int>> &grid, vector<vector<int>> &visited, queue<pair<int, int>> &q, int i, int j) {
    int n = grid.size();
    int m = grid[0].size();
    visited[i][j] = 1;
    q.push({i, j});
    int delrow[] = {0, 1, 0, -1};
    int delcol[] = {1, 0, -1, 0};
    while(!q.empty()) {
        int front_row = q.front().first;
        int front_col = q.front().second;
        q.pop();
        
        for(int i = 0; i < 4; i++) {
            int newrow = front_row + delrow[i];
            int newcol = front_col + delcol[i];
                if(newrow >= 0 && newrow < n && newcol >= 0 && newcol < m && grid[newrow][newcol] == 1 && !visited[newrow][newcol]) {
                    visited[newrow][newcol] = 1;
                    q.push({newrow, newcol});
                }
    
        }
    }
}

int noOfIsland(vector<vector<int>> &grid) {
    int n = grid.size();
    int m = grid[0].size();
    vector<vector<int>> visited(n, vector<int>(m, 0));
    queue<pair<int, int>> q;
    int count = 0;
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < m; j++) {
            if(!visited[i][j] && grid[i][j] == 1) {
                BFS(grid, visited, q, i, j);
                count++;
            }
        }
    }
    
    return count;
}

int main() {
    
    int n, m;
    cout<<"Enter number of rows :- ";
    cin>>n;
    cout<<"Enter number of columns :- ";
    cin>>m;
    vector<vector<int>> grid(n, vector<int>(m, 0));
    
    for(int i = 0; i < n; i++) {
        cout<<"Enter "<<i + 1<<"th row :- ";
        for(int j = 0; j < m; j++) {
            cin>>grid[i][j];
        }
    }
    cout<<"2 D array is :- "<<endl;
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < m; j++) {
            cout<<grid[i][j]<<" ";
        }
        cout<<endl;
    }
    
    int result = noOfIsland(grid);
    cout<<"Number of island is :- "<<result;
    
    return 0;
}
