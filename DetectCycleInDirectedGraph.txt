#include<bits/stdc++.h>
using namespace std;

const int V = 4;

void addEdge(vector<int> graph[], int source, int destination) {
    graph[source].push_back(destination);
}

bool DFS(vector<int> graph[], vector<int> &visited, vector<int> &pathVisited, int i) {
    visited[i] = 1;
    pathVisited[i] = 1;
    for(int neighbour: graph[i]) {
        if(!visited[neighbour]) {
            if(DFS(graph, visited, pathVisited, neighbour) == true) {
                return true;
            }
        }
        else if(pathVisited[neighbour]) {
            return true;
        }
    }
    
    pathVisited[i] = 0;
    return false;
}

bool checkCycle(vector<int> graph[]) {
    vector<int> visited(V, 0);
    vector<int> pathVisited(V, 0);
    for(int i = 0; i < V; i++) {
        if(!visited[i]) {
            if(DFS(graph, visited, pathVisited, i) == true) {
                return true;
            }
        }
    }
    
    return false;
}

int main() {
    
    vector<int> graph[V];
    
    //Test Case - 1, Acyclic Graph example
    // addEdge(graph, 0, 1);
    // addEdge(graph, 0, 2);
    // addEdge(graph, 0, 3);
    // addEdge(graph, 1, 2);
    
    //Test Case - 2, Cyclic Graph example
    addEdge(graph, 0, 1);
    addEdge(graph, 1, 2);
    addEdge(graph, 2, 0);
    addEdge(graph, 0, 3);
    
    
    
    bool result = checkCycle(graph);
    if(result) {
        cout<<"Graph is cyclic !!";
    }
    else {
        cout<<"Graph is not cyclic !!";
    }
    
    return 0;
}
