#include<bits/stdc++.h>
using namespace std;

const int V = 5;

void addEdge(vector<int> graph[], int source, int destination) {
    graph[source].push_back(destination);
    graph[destination].push_back(source);
}

bool DFS(vector<int> graph[], vector<int> &visited, int node, int parent) {
    visited[node] = 1;
    for(int neighbour: graph[node]) {
        if(!visited[neighbour]) {
            if(DFS(graph, visited, neighbour, node) == true) {
                return true;
            }
        }
        else if(visited[neighbour] && neighbour != parent) {
            return true;
        }
    }
    
    return false;
}

bool isCyclic(vector<int> graph[], vector<int> &visited) {
    for(int i = 0; i < V; i++) {
        int parent = -1;
        if(!visited[i]) {
            if(DFS(graph, visited, i, parent) == true) {
                return true;
            }
        }
    }
    
    return false;
}

int main() {
    
    vector<int> graph[V];

    //Test Case 1
    // addEdge(graph, 0, 1);
    // addEdge(graph, 1, 2);
    // addEdge(graph, 2, 3);
    // addEdge(graph, 3, 4);
    // addEdge(graph, 4, 0);
    
    //Test Case 2
    addEdge(graph, 0, 1);
    addEdge(graph, 1, 2);
    addEdge(graph, 2, 3);
    addEdge(graph, 3, 4);
    
    vector<int> visited(V, 0);
    bool result = isCyclic(graph, visited);
    if(result) {
        cout<<"Graph is cyclic !!";
    }
    else {
        cout<<"Graph is not cyclic !!";
    }
    
    return 0;
}
