#include<bits/stdc++.h>
using namespace std;

vector<vector<int>> directions{{1, 1}, {0, 1}, {1, 0}, {-1, 0}, {0, -1}, {-1, -1}, {1, -1}, {-1, 1}};

int shortestPathInMatrix(queue<pair<int, int>> &q, vector<vector<int>> &grid, int level) {
    
    int n = grid.size();
    int m = grid[0].size();
    
    if(n == 0 || m == 0 || grid[0][0] != 0)
        return -1;
    
    auto isSafe = [&](int x, int y) {
        return (x >= 0 && x < n && y >= 0 && y < m);
    };
    
    while(!q.empty()) {
        
        int Size = q.size();
        
        while(Size--) {
            int x = q.front().first;
            int y = q.front().second;
            q.pop();
            
            if(x == n - 1 && y == m - 1)
                return level + 1;
                
            for(auto dir: directions) {
                int x_dir = x + dir[0];
                int y_dir = y + dir[1];
                
                if(isSafe(x_dir, y_dir) && grid[x_dir][y_dir] == 0) {
                    q.push({x_dir, y_dir});
                    grid[x_dir][y_dir] = 1;
                }
            }
        }
        
        level++;
    }
    
    return -1;
}

int main() {
    
    int n, m;
    cout<<"Enter number of rows :- ";
    cin>>n;
    cout<<"Enter number of columns :- ";
    cin>>m;
    
    vector<vector<int>> grid(n, vector<int>(m, 0));
    
    for(int i = 0; i < n; i++) {
        cout<<"Enter "<<i<<" th row :- ";
        for(int j = 0; j < m; j++) {
            cin>>grid[i][j];
        }
    }
    cout<<"2 D grid is :- "<<endl;
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < m; j++) {
            cout<<grid[i][j]<<" ";
        }
        cout<<endl;
    }
    
    queue<pair<int, int>> q;
    q.push({0, 0});
    grid[0][0] = 1;
    
    int level = 0;
    
    int result = shortestPathInMatrix(q, grid, level);
    
    cout<<"Shortest path is :- "<<result;
    
    
    return 0;
}
