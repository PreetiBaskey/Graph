// Approach 1
#include<bits/stdc++.h>
using namespace std;
typedef pair<int, int> P;

int calculateMinute(vector<vector<int>> &grid, queue<P> &q, int &freshOrangeCount) {
    int m = grid.size();
    int n = grid[0].size();
    vector<vector<int>> visited(m, vector<int>(n, 0));
    int delRow[] = {0, 1, 0, -1};
    int delCol[] = {-1, 0, 1, 0};
    int minute = 0;
    while(!q.empty()) {
        int length = q.size();
        while(length--) {
            int frontRow = q.front().first;
            int frontCol = q.front().second;
            q.pop();
            for(int i = 0; i < 4; i++) {
                int newRow = frontRow + delRow[i];
                int newCol = frontCol + delCol[i];
                if(newRow >=0 && newRow < m && newCol >= 0 && newCol < n && grid[newRow][newCol] == 1 && !visited[newRow][newCol]) {
                    grid[newRow][newCol] = 2;
                    q.push({newRow, newCol});
                    freshOrangeCount--;
                }
            }
        }
        minute++;
    }
    
    if(freshOrangeCount != 0) return -1;
    else return minute - 1;
}

int main() {
    
    int m, n;
    cout<<"Enter the number of rows :- ";
    cin>>m;
    cout<<"Enter the number of columns :- ";
    cin>>n;
    vector<vector<int>> grid(m, vector<int>(n));
    int freshOrangeCount = 0;
    queue<P> q; 
    
    for(int i = 0; i < m; i++) {
        cout<<"Enter "<<i<<"th row :- ";
        for(int j = 0; j < n; j++) {
            cin>>grid[i][j];
        }
    }
    cout<<"2D grid is :- "<<endl;
    for(int i = 0; i < m; i++) {
        for(int j = 0; j < n; j++) {
            cout<<grid[i][j]<<" ";
            if(grid[i][j] == 2) {
                q.push({i, j});
            }
            else if(grid[i][j] == 1) {
                freshOrangeCount++;
            }
        }
        cout<<endl;
    }
    
    if(freshOrangeCount == 0) {
        cout<<"There is no fresh oranges";
    }
    else {
        cout<<"Minimum minute to rot all the oranges is :- "<<calculateMinute(grid, q, freshOrangeCount);
    }
    
    
    return 0;
}







// Approach 2
#include<bits/stdc++.h>
using namespace std;

int checkRottenOranges(vector<vector<int>> &grid, vector<vector<int>> &visited, queue<pair<pair<int, int>, int>> &q) {
    int n = grid.size();
    int m = grid[0].size();
    int delRow[] = {-1, 0, 1, 0};
    int delCol[] = {0, 1, 0, -1};
    int unitTime = 0;
    
    while(!q.empty()) {
        int front_row = q.front().first.first;
        int front_col = q.front().first.second;
        unitTime = q.front().second;
        q.pop();
        for(int i = 0; i < 4; i++) {
            int newRow = front_row + delRow[i];
            int newCol = front_col + delCol[i];
            if(newRow >= 0 && newRow < n && newCol >= 0 && newCol < m && grid[newRow][newCol] == 1 && !visited[newRow][newCol]) {
                q.push({{newRow, newCol}, unitTime + 1});
                visited[newRow][newCol] = 1;
                grid[newRow][newCol] = 2;
            }
        }
    }
    
    return unitTime;
}

int main() {
    
    int n, m;
    
    cout<<"Enter number of rows :- ";
    cin>>n;
    cout<<"Enter number of columns :- ";
    cin>>m;
    
    vector<vector<int>> grid(n, vector<int>(m, 0));
    vector<vector<int>> visited(n, vector<int>(m, 0));
    queue<pair<pair<int, int>, int>> q;
    
    for(int i = 0; i < n; i++) {
        cout<<"Enter "<<i + 1<<" th row :- ";
        for(int j = 0; j < m;j ++) {
            cin>>grid[i][j];
        }
    }
    cout<<"2 D grid is :- "<<endl;
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < m; j++) {
            cout<<grid[i][j]<<" ";
            if(grid[i][j] == 2) {
                q.push({{i, j}, 0});
            }
        }
        cout<<endl;
    }
    
    int earliestTime = checkRottenOranges(grid, visited, q);
    cout<<"Unit time is :- "<<earliestTime;
    
    cout<<endl<<"Final grid is :- "<<endl;
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < m; j++) {
            cout<<grid[i][j]<<" ";
        }
        cout<<endl;
    }
    
    
    
    return 0;
}
