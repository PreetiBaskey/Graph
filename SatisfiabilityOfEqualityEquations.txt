#include<bits/stdc++.h>
using namespace std;

int Find(int x, vector<int> &parent)  {
    if(x == parent[x]) {
        return x;
    }
    return parent[x] = Find(parent[x], parent);
}
void Union(int x, int y, vector<int> &parent, vector<int> &rank) {
    
    int parent_x = Find(x, parent);
    int parent_y = Find(y, parent);
    
    if(parent_x == parent_y) {
        return;
    }
    else if(rank[parent_x] > rank[parent_y]) {
        parent[parent_y] = parent_x;
    }
    else if(rank[parent_y] > rank[parent_x])  {
        parent[parent_x] = parent_y;
    }
    else if(rank[parent_x] == rank[parent_y]) {
        parent[parent_y] = parent_x;
        rank[parent_x]++;
    }
    
}

bool checkEquality(vector<string> &str) {
    vector<int> parent(26);
    vector<int> rank(26);
    
    //fill parent vector
    for(int i = 0; i < 26; i++) {
        parent[i] = i;
    }
    
    for(string str1: str) {
        if(str1[1] == '=') {
            Union(str1[0] - 'a', str1[3] - 'a', parent, rank);
        }
        if(str1[1] == '!') {
            int first_parent = Find(str1[0] - 'a', parent);
            int second_parent = Find(str1[3] - 'a', parent);
            
            if(first_parent == second_parent)   return false;
        }
    }
    
    return true;
}

int main() {
    
    vector<string> str;
    
    //Test Case 1
    // str.push_back("a==b");
    // str.push_back("b==a");

    //Test Case 2
    // str.push_back("a==b");
    // str.push_back("a==c");
    // str.push_back("b!=c");
    
    // Test Case 3
    str.push_back("a==b");
    str.push_back("e==c");
    str.push_back("b==c");
    str.push_back("a!=e");
    
    bool result = checkEquality(str);
    if(result) {
        cout<<"Result is :- "<<"true";
    }
    else {
        cout<<"Result is :- "<<"false";
    }
    
    return 0;
}
