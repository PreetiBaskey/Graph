#include<bits/stdc++.h>
using namespace std;

//Test Cases 1 : 
const int V = 4;

//Test Cases 2 : 
// const int V = 5;

void addEdge(vector<int> graph[], int source, int destination) {
    graph[source].push_back(destination);
    graph[destination].push_back(source);
}

void printGraph(vector<int> graph[]) {
    cout<<"Adjacency list is : "<<endl;
    for(int source = 0; source < V; source++) {
        cout<<"Number of size of "<<source<<" is :- "<<graph[source].size()<<endl;
        for(int neighbour: graph[source]) {
            cout<<"There is an edge between "<<source<<" and "<<neighbour<<endl;
        }
        cout<<endl;
    }
}

bool DFS(vector<int> graph[], vector<int> &color, int currentColor, int currentNode) {
    color[currentNode] = currentColor;
    for(int neighbour: graph[currentNode]) {
        if(color[currentNode] == color[neighbour]) {
            return false;
        }
        if(color[neighbour] == -1) {
            if(DFS(graph, color, 1 - currentColor, neighbour) == false) {
                return false;
            }
        }
    }
    return true;
}

bool checkBipartite(vector<int> graph[]) {
    vector<int> color(V, -1);
    for(int i = 0; i < V; i++) {
        int currentColor = 1;
        if(color[i] == -1) {
            if(DFS(graph, color, currentColor, i) == false) {
                return false;
            }
        }
    }
    return true;
}

int main() {
    
    vector<int> graph[V];
    
    //Test Cases 1 : 
    addEdge(graph, 0, 1);
    addEdge(graph, 0, 2);
    addEdge(graph, 0, 3);
    addEdge(graph, 1, 2);
    
    //Test Cases 2 : 
    // addEdge(graph, 0, 1);
    // addEdge(graph, 0, 3);
    // addEdge(graph, 0, 4);
    // addEdge(graph, 1, 2);
    // addEdge(graph, 2, 3);
    
    
    printGraph(graph);
    
    bool result = checkBipartite(graph);
    if(result) {
        cout<<"Bipartite !!";
    }
    else {
        cout<<"Not bipartite !!";
    }
    
    return 0;
}
