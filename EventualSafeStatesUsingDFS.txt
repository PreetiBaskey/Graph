#include<bits/stdc++.h>
using namespace std;

//For Test Case - 1
// const int V = 7;

//For Test Cases - 2, 3, 4
const int V = 4;

void addEdge(vector<int> graph[], int source, int destination) {
    graph[source].push_back(destination);
}

bool DFS(vector<int> graph[], vector<int> &visited, vector<int> &pathVisited, int node) {
    visited[node] = 1;
    pathVisited[node] = 1;
    for(int neighbour: graph[node]) {
        if(!visited[neighbour]) {
            if(DFS(graph, visited, pathVisited, neighbour) == true) {
                return true;
            }
        }
        else if(pathVisited[neighbour]) {
            return true;
        }
    }
    
    pathVisited[node] = 0;
    return false;
}

bool checkCycle(vector<int> graph[], vector<int> &visited, vector<int> &pathVisited) {
    for(int i = 0; i < V; i++) {
        if(!visited[i]) {
            if(DFS(graph, visited, pathVisited, i) == true) {
                return true;
            }
        }
    }
    
    return false;
}

int main() {
    
    vector<int> graph[V];
    
    //Test Case - 1
    // addEdge(graph, 0, 1);
    // addEdge(graph, 0, 2);
    // addEdge(graph, 1, 3);
    // addEdge(graph, 2, 5);
    // addEdge(graph, 3, 0);
    // addEdge(graph, 4, 5);
    
    //Test Case - 2 
    addEdge(graph, 0, 1);
    addEdge(graph, 1, 2);
    addEdge(graph, 2, 0);
    addEdge(graph, 2, 3);
    
    //Test Case - 3
    // addEdge(graph, 0, 1);
    // addEdge(graph, 1, 2);
    // addEdge(graph, 2, 0);
    // addEdge(graph, 0, 3);
    
    //Test Case - 4
    // addEdge(graph, 0, 1);
    // addEdge(graph, 0, 2);
    // addEdge(graph, 0, 3);
    // addEdge(graph, 1, 2);
    
    vector<int> visited(V, 0);
    vector<int> pathVisited(V, 0);
    bool result = checkCycle(graph, visited, pathVisited);
    if(result) {
        cout<<"Graph is cyclic !!";
    }
    else {
        cout<<"Graph is not cyclic !!";
    }
    
    cout<<endl<<"Eventual Safe nodes are :- ";
    for(int i = 0; i < V; i++) {
        if(!pathVisited[i]) {
            cout<<i<<" ";
        }
    }
    
    return 0;
}




// LeetCode version
class Solution {
public:

    bool isCyclic(vector<vector<int>> &graph, vector<int> &visited, vector<int> &inRecursion, int node) {
        visited[node] = 1;
        inRecursion[node] = 1;
        for(int &neighbour: graph[node]) {
            if(!visited[neighbour]) {
                if(isCyclic(graph, visited, inRecursion, neighbour) == true) {
                    return true;
                } 
            }
            else if(inRecursion[neighbour]) {
                return true;
            }
        }

        return false;
    }

    vector<int> eventualSafeNodes(vector<vector<int>>& graph) {
        int v = graph.size();
        vector<int> visited(v, 0);
        vector<int> inRecursion(v, 0);
        vector<int> safeNodes;

        for(int i = 0; i < v; i++) {
            if(!visited[i]) {
                isCyclic(graph, visited, inRecursion, i);
            }
        }

        for(int i = 0; i < v; i++) {
            if(!inRecursion[i]) {
                safeNode.push_back(i);
            }
        }

        return safeNodes;
    }
};
