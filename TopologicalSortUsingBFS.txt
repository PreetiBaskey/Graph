#include<bits/stdc++.h>
using namespace std;

const int V = 6;

void addEdge(vector<int> graph[], int source, int destination) {
    graph[source].push_back(destination);
}

void topologicalSort(vector<int> graph[], vector<int> &indegree, vector<int> &ans) {
    queue<int> q;
    
    for(int u = 0; u < V; u++) {
        for(int v: graph[u]) {
            indegree[v]++;
        }
    }
    for(int i = 0; i < V; i++) {
        if(indegree[i] == 0) {
            q.push(i);
        }
    }
    while(!q.empty()) {
        int front_node = q.front();
        q.pop();
        ans.push_back(front_node);
        for(int v: graph[front_node]) {
            indegree[v]--;
            
            if(indegree[v] == 0) {
                q.push(v);
            }
        }
    }
}

int main() {
    
    vector<int> graph[V];
    
    addEdge(graph, 0, 2);
    addEdge(graph, 0, 3);
    addEdge(graph, 1, 4);
    addEdge(graph, 2, 1);
    addEdge(graph, 2, 3);
    addEdge(graph, 3, 1);
    addEdge(graph, 5, 1);
    addEdge(graph, 5, 4);
    
    vector<int> indegree(V, 0);
    vector<int> ans;
    topologicalSort(graph, indegree, ans);
    for(int i = 0; i < V; i++) {
        cout<<ans[i]<<" ";
    }
    
    return 0;
}
