#include<bits/stdc++.h>
using namespace std;

int numberOfEnclaves(vector<vector<int>> &grid, queue<pair<int, int>> &q, vector<vector<int>> &visited) {
    int n = grid.size();
    int m = grid[0].size();
    int delRow[] = {-1, 0, 1, 0};
    int delCol[] = {0, 1, 0, -1};
    int count = 0;
    while(!q.empty()) {
        int front_row = q.front().first;
        int front_col = q.front().second;
        q.pop();
        for(int i= 0; i < 4; i++) {
            int newRow = front_row + delRow[i];
            int newCol = front_col + delCol[i];
            if(newRow >= 0 && newRow < n && newCol >= 0 && newCol < m && grid[newRow][newCol] == 1 && !visited[newRow][newCol]) {
                q.push({newRow, newCol});
                visited[newRow][newCol] = 1;
            }
        }
    }
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < m; j++) {
            if(grid[i][j] == 1 && !visited[i][j]) {
                count++;
            }
        }
    }
    
    return count;
}

int main() {
    
    int n, m;
    
    cout<<"Enter number of rows :- ";
    cin>>n;
    cout<<"Enter number of columns :- ";
    cin>>m;
    
    vector<vector<int>> grid(n, vector<int>(m));
    queue<pair<int, int>> q;
    
    for(int i = 0; i < n; i++) {
        cout<<"Enter "<<i<<"th row :- ";
        for(int j = 0; j < m; j++) {
            cin>>grid[i][j];
        }
    }
    cout<<"2 D grid is :- "<<endl;
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < m; j++) {
            cout<<grid[i][j]<<" ";
        }
        cout<<endl;
    }

    vector<vector<int>> visited(n, vector<int>(m, 0));

    //For first and last column
    for(int i = 0; i < n; i++) {
        if(grid[i][0] == 1) {
            q.push({i, 0});
            visited[i][0] = 1;
        }
        if(grid[i][m - 1] == 1) {
            q.push({i, m - 1});
            visited[i][m - 1] = 1;
        }
    }
    //For first and last row
    for(int j = 0; j < m; j++) {
        if(grid[0][j] == 1) {
            q.push({0, j});
            visited[0][j] = 1;
        }
        if(grid[n - 1][j] == 1) {
            q.push({n - 1, j});
            visited[n - 1][j] = 1;
        }
    }
    
    int result = numberOfEnclaves(grid, q, visited);
    cout<<"Number of enclaves :-  "<<result;
    
    return 0;
}










// Number of Enclaves - LeetCode version code
class Solution {
public:
    int noOfEnclaves(vector<vector<int>> &grid, vector<vector<int>> &visited, queue<pair<int, int>> &q) {
        int m = grid.size();
        int n = grid[0].size();
        int count = 0;
        int delRow[] = {-1, 0, 1, 0};
        int delCol[] = {0, 1, 0, -1};
        while(!q.empty()) {
            int frontRow = q.front().first;
            int frontCol = q.front().second;
            q.pop();
            for(int i = 0; i < 4; i++) {
                int newRow = frontRow + delRow[i];
                int newCol = frontCol + delCol[i];
                if(newRow >= 0 && newRow < m && newCol >= 0 && newCol < n && !visited[newRow][newCol] && grid[newRow][newCol] == 1) {
                    visited[newRow][newCol] = 1;
                    q.push({newRow, newCol});
                }
            }
        }

        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if(!visited[i][j] && grid[i][j] == 1) {
                    count++;
                }
            }
        }

        return count;
    }
    int numEnclaves(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        vector<vector<int>> visited(m, vector<int>(n, 0));
        queue<pair<int, int>> q;
        for(int i = 0; i < m; i++) {
            if(grid[i][0] == 1) {
                visited[i][0] = 1;
                q.push({i, 0});
            }
            if(grid[i][n - 1] == 1) {
                visited[i][n - 1] = 1;
                q.push({i, n - 1});
            }
        }
        for(int j = 0; j < n; j++) {
            if(grid[0][j] == 1) {
                visited[0][j] = 1;
                q.push({0, j});
            }
            if(grid[m - 1][j] == 1) {
                visited[m - 1][j] = 1;
                q.push({m - 1, j});
            }
        }
        
        return noOfEnclaves(grid, visited, q);
    }
};
